// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentalStore.Api.Infrastructure.Data;

namespace RentalStore.Api.Data.Migrations
{
    [DbContext(typeof(RentalStoreContext))]
    [Migration("20180919154704_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RentalStore.Api.Core.Domain.Cart.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("RentalStore.Api.Core.Domain.Cart.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CartId");

                    b.Property<int?>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("RentalStore.Api.Core.Domain.Order.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("RentalStore.Api.Core.Domain.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RentalStore.Api.Core.Domain.Order.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderId");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("RentalStore.Api.Core.Domain.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Genre");

                    b.Property<int>("InStock");

                    b.Property<decimal>("Price");

                    b.Property<string>("Title");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new { ProductId = 1, Description = "...", Genre = "Adventure", InStock = 10, Price = 20.00m, Title = "Pandora Hearts #1" },
                        new { ProductId = 2, Description = "...", Genre = "Adventure", InStock = 0, Price = 18.00m, Title = "Pandora Hearts #2" },
                        new { ProductId = 3, Genre = "Fantasy", InStock = 3, Price = 19.90m, Title = "Akame ga Kill #1" },
                        new { ProductId = 4, Genre = "Fantasy", InStock = 4, Price = 19.90m, Title = "Akame ga Kill #2" },
                        new { ProductId = 5, Genre = "Horror", InStock = 7, Price = 23.50m, Title = "Pamiętnik Przyszłości #1" },
                        new { ProductId = 6, Genre = "Horror", InStock = 20, Price = 35.79m, Title = "Pamiętnik Przyszłości #2" },
                        new { ProductId = 7, Description = "...", Genre = "Adventure", InStock = 10, Price = 20.00m, Title = "Pandora Hearts #1" },
                        new { ProductId = 8, Description = "...", Genre = "Adventure", InStock = 0, Price = 18.00m, Title = "Pandora Hearts #2" },
                        new { ProductId = 9, Genre = "Horror", InStock = 7, Price = 23.50m, Title = "Pamiętnik Przyszłości #1" },
                        new { ProductId = 10, Genre = "Horror", InStock = 20, Price = 35.79m, Title = "Pamiętnik Przyszłości #2" }
                    );
                });

            modelBuilder.Entity("RentalStore.Api.Core.Domain.Cart.CartItem", b =>
                {
                    b.HasOne("RentalStore.Api.Core.Domain.Cart.Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId");

                    b.HasOne("RentalStore.Api.Core.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("RentalStore.Api.Core.Domain.Order.Order", b =>
                {
                    b.HasOne("RentalStore.Api.Core.Domain.Order.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("RentalStore.Api.Core.Domain.Order.OrderItem", b =>
                {
                    b.HasOne("RentalStore.Api.Core.Domain.Order.Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");
                });
#pragma warning restore 612, 618
        }
    }
}
